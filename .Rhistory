),
# Boxes
fluidRow(
box(status = "primary",
sliderInput("orders", "Orders", min = 1, max = 2000, value = 650),
selectInput("progress", "Progress",
choices = c("0%" = 0, "20%" = 20, "40%" = 40, "60%" = 60, "80%" = 80,
"100%" = 100)
)
),
box(title = "Histogram box title",
status = "warning", solidHeader = TRUE, collapsible = TRUE,
plotOutput("plot", height = 250)
)
),
# Boxes with solid color, using `background`
fluidRow(
# Box with textOutput
box(
title = "Status summary",
background = "green",
width = 4,
textOutput("status")
),
# Box with HTML output, when finer control over appearance is needed
box(
title = "Status summary 2",
width = 4,
background = "red",
uiOutput("status2")
),
box(
width = 4,
background = "light-blue",
p("This is content. The background color is set to light-blue")
)
)
)
server <- function(input, output) {
output$orderNum <- renderText({
prettyNum(input$orders, big.mark=",")
})
output$orderNum2 <- renderText({
prettyNum(input$orders, big.mark=",")
})
output$progress <- renderUI({
tagList(input$progress, tags$sup(style="font-size: 20px", "%"))
})
output$progress2 <- renderUI({
paste0(input$progress, "%")
})
output$status <- renderText({
paste0("There are ", input$orders,
" orders, and so the current progress is ", input$progress, "%.")
})
output$status2 <- renderUI({
iconName <- switch(input$progress,
"100" = "ok",
"0" = "remove",
"road"
)
p("Current status is: ", icon(iconName, lib = "glyphicon"))
})
output$plot <- renderPlot({
hist(rnorm(input$orders))
})
}
shinyApp(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar(),
body
),
server = server
)
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
ï¼Ÿbox
?box
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
fluidRow
?fluidRow
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
?tabItem
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
library(rsconnect)
deployApp('/Users/stead/JS_data/source_tree/project_code/seer/ESCC_project')
deployApp('/Users/stead/JS_data/source_tree/project_code/seer/ESCC_project')
library(Survival)
library(survival)
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
deployApp('/Users/stead/JS_data/source_tree/project_code/seer/ESCC_project')
?Survival
deployApp('/Users/stead/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
shinyApp(
ui = basicPage(
numericInput("num", label = "Make changes", value = 1),
submitButton("Update View", icon("refresh")),
helpText("When you click the button above, you should see",
"the output below update to reflect the value you",
"entered at the top:"),
verbatimTextOutput("value")
),
server = function(input, output) {
# submit buttons do not have a value of their own,
# they control when the app accesses values of other widgets.
# input$num is the value of the number widget.
output$value <- renderPrint({ input$num })
}
)
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
library(shiny)
css <- "
#large .selectize-input { line-height: 40px; }
#large .selectize-dropdown { line-height: 30px; }"
ui <- fluidPage(
tags$style(type='text/css', css),
selectInput("select1", "Regular select", LETTERS),
div(id = "large",
selectInput("select2", "Large select", LETTERS)
)
)
server <- function(input, output, session) {}
shinyApp(ui, server)
library(shiny)
css <- "
.shiny-output-error { visibility: hidden; }
.shiny-output-error:before {
visibility: visible;
content: 'An error occurred. Please contact the admin.'; }
}
"
ui <- fluidPage(
tags$style(type="text/css", css),
textOutput("text1"),
textOutput("text2")
)
server <- function(input, output, session) {
output$text1 <- renderText({
stop("Some error")
})
output$text2 <- renderText({
"Hello"
})
}
shinyApp(ui, server)
library(shiny)
jscode <- '
$(function() {
var $els = $("[data-proxy-click]");
$.each(
$els,
function(idx, el) {
var $el = $(el);
var $proxy = $("#" + $el.data("proxyClick"));
$el.keydown(function (e) {
if (e.keyCode == 13) {
$proxy.click();
}
});
}
);
});
'
ui <- fluidPage(
tags$head(tags$script(HTML(jscode))),
actionButton("btn", "Click me to print the value in the text field"),
div("Or press Enter when the text field is focused to \"press\" the button"),
tagAppendAttributes(
textInput("text", NULL, "foo"),
`data-proxy-click` = "btn"
)
)
server <- function(input, output, session) {
observeEvent(input$btn, {
cat(input$text, "\n")
})
}
shinyApp(ui, server)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Long Run"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
actionButton('run', 'Run')
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("result")
)
)
)
server <- function(input, output) {
N <- 10
result_val <- reactiveVal()
observeEvent(input$run,{
result_val(NULL)
withProgress(message = 'Calculation in progress', {
for(i in 1:N){
# Long Running Task
Sys.sleep(1)
# Update progress
incProgress(1/N)
}
result_val(quantile(rnorm(1000)))
})
})
output$result <- renderTable({
result_val()
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("Long Run Async"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
actionButton('run', 'Run')
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("result")
)
)
)
server <- function(input, output) {
N <- 10
result_val <- reactiveVal()
observeEvent(input$run,{
result_val(NULL)
future({
print("Running...")
for(i in 1:N){
Sys.sleep(1)
}
quantile(rnorm(1000))
}) %...>% result_val()
})
output$result <- renderTable({
req(result_val())
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Long Run Stoppable Async"),
sidebarLayout(
sidebarPanel(
actionButton('run', 'Run'),
actionButton('cancel', 'Cancel'),
actionButton('status', 'Check Status')
),
mainPanel(
tableOutput("result")
)
)
)
server <- function(input, output) {
N <- 10
# Status File
status_file <- tempfile()
get_status <- function(){
scan(status_file, what = "character",sep="\n")
}
set_status <- function(msg){
write(msg, status_file)
}
fire_interrupt <- function(){
set_status("interrupt")
}
fire_ready <- function(){
set_status("Ready")
}
fire_running <- function(perc_complete){
if(missing(perc_complete))
msg <- "Running..."
else
msg <- paste0("Running... ", perc_complete, "% Complete")
set_status(msg)
}
interrupted <- function(){
get_status() == "interrupt"
}
# Delete file at end of session
onStop(function(){
print(status_file)
if(file.exists(status_file))
unlink(status_file)
})
# Create Status File
fire_ready()
nclicks <- reactiveVal(0)
result_val <- reactiveVal()
observeEvent(input$run,{
# Don't do anything if analysis is already being run
if(nclicks() != 0){
showNotification("Already running analysis")
return(NULL)
}
# Increment clicks and prevent concurrent analyses
nclicks(nclicks() + 1)
result_val(data.frame(Status="Running..."))
fire_running()
result <- future({
print("Running...")
for(i in 1:N){
# Long Running Task
Sys.sleep(1)
# Check for user interrupts
if(interrupted()){
print("Stopping...")
stop("User Interrupt")
}
# Notify status file of progress
fire_running(100*i/N)
}
#Some results
quantile(rnorm(1000))
}) %...>% result_val()
# Catch inturrupt (or any other error) and notify user
result <- catch(result,
function(e){
result_val(NULL)
print(e$message)
showNotification(e$message)
})
# After the promise has been evaluated set nclicks to 0 to allow for anlother Run
result <- finally(result,
function(){
fire_ready()
nclicks(0)
})
# Return something other than the promise so shiny remains responsive
NULL
})
output$result <- renderTable({
req(result_val())
})
# Register user interrupt
observeEvent(input$cancel,{
print("Cancel")
fire_interrupt()
})
# Let user get analysis progress
observeEvent(input$status,{
print("Status")
showNotification(get_status())
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput("n", "Number of observations", 2, 1000, 500),
plotOutput("plot")
)
server <- function(input, output) {
# Anything that calls autoInvalidate will automatically invalidate
# every 2 seconds.
autoInvalidate <- reactiveTimer(2000)
observe({
# Invalidate and re-execute this reactive expression every time the
# timer fires.
autoInvalidate()
# Do something each time this is invalidated.
# The isolate() makes this observer _not_ get invalidated and re-executed
# when input$n changes.
print(paste("The value of input$n is", isolate(input$n)))
})
# Generate a new histogram each time the timer fires, but not when
# input$n changes.
output$plot <- renderPlot({
autoInvalidate()
hist(rnorm(isolate(input$n)))
})
}
shinyApp(ui, server)
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
# Create 0-row data frame which will be used to store data
dat <- data.frame(x = numeric(0), y = numeric(0))
withProgress(message = 'Making plot', value = 0, {
# Number of times we'll go through the loop
n <- 10
for (i in 1:n) {
# Each time through the loop, add another row of data. This is
# a stand-in for a long-running computation.
dat <- rbind(dat, data.frame(x = rnorm(1), y = rnorm(1)))
# Increment the progress bar, and update the detail text.
incProgress(1/n, detail = paste("Doing part", i))
# Pause for 0.1 seconds to simulate a long computation.
Sys.sleep(0.1)
}
})
plot(dat$x, dat$y)
})
}
ui <- shinyUI(basicPage(
plotOutput('plot', width = "300px", height = "300px"),
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
# Create 0-row data frame which will be used to store data
dat <- data.frame(x = numeric(0), y = numeric(0))
withProgress(message = 'Making plot', value = 0, {
# Number of times we'll go through the loop
n <- 10
for (i in 1:n) {
# Each time through the loop, add another row of data. This is
# a stand-in for a long-running computation.
dat <- rbind(dat, data.frame(x = rnorm(1), y = rnorm(1)))
# Increment the progress bar, and update the detail text.
incProgress(1/n, detail = paste("Doing part", i))
# Pause for 0.1 seconds to simulate a long computation.
Sys.sleep(0.1)
}
})
plot(dat$x, dat$y)
})
}
ui <- shinyUI(basicPage(
plotOutput('plot', width = "300px", height = "300px"),
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
shiny::runApp()
runApp()
f3 <- cph(y ~  Age  + Regional_nodes_positive + Grade + Stage_4_group,
data = mat_sur, x = TRUE, y = TRUE, surv = TRUE, time.inc = 12*5)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?box
runApp()
?DTOutput
runApp()
?column
?fluidRow
runApp()
runApp()
