})
#计算面积的函数实现
setMethod('area', 'Circle', function(obj, ...){
print('Area Cirvle Method')
pi*obj@radis^2
})
###任务1: 定义一个图形库的数据结构和计算函数
#定义基类Shape
setClass('Shape', slots = list(name = 'Character'))
setClass('Circle', contains = 'Shape', slots = list(radius = 'numeric', prototype = list(radius = 1)))
###任务1: 定义一个图形库的数据结构和计算函数
#定义基类Shape
setClass('Shape', slots = list(name = 'Character'))
#定义圆形类，并继承Shape, 属性radius默认为1
setClass('Circle', contains = 'Shape', slots = list(radius = 'numeric', prototype = list(radius = 1)))
#定义圆形类，并继承Shape, 属性radius默认为1
setClass('Circle', contains = 'Shape', slots = list(radius = 'numeric'), prototype = list(radius = 1))
#验证radius属性值要大于等于0
setValidity('Circle', function(object){
if(object@radius <= 0)
stop('Radius is negative')
})
#创建两个圆形实例
c1 <- new('Circle', name = 'C1')
#创建两个圆形实例
c1 <- new('Circle', name = 'c1')
c2 <- new('Circle', name = 'c2', radius = 5)
#创建两个圆形实例
c1 <- new('Circle', name = 'c1')
###任务1: 定义一个图形库的数据结构和计算函数
#定义基类Shape
setClass('Shape', slots = list(name = "Character"))
###任务1: 定义一个图形库的数据结构和计算函数
#定义基类Shape
setClass('Shape', slots = list(name = "character"))
#定义圆形类，并继承Shape, 属性radius默认为1
setClass('Circle', contains = 'Shape', slots = list(radius = 'numeric'), prototype = list(radius = 1))
#验证radius属性值要大于等于0
setValidity('Circle', function(object){
if(object@radius <= 0)
stop('Radius is negative')
})
#创建两个圆形实例
c1 <- new('Circle', name = 'c1')
c2 <- new('Circle', name = 'c2', radius = 5)
#定义计算面积借口实现
setGeneric('area', function(obj, ...){
standardGeneric('area')
})
#计算面积的函数实现
setMethod('area', 'Circle', function(obj, ...){
print('Area Circle Method')
pi*obj@radis^2
})
area(c2)
#计算面积的函数实现
setMethod('area', 'Circle', function(obj, ...){
print('Area Circle Method')
pi*obj@radius^2
})
area(c2)
area(c1)
setClass('Ellipse', contains = 'Shape', slots = list(radius = numeric), prototype  = list(radius = c(1, 1)))
#validate
setValidity('Ellipse', function(obj, ...){
if(obj@radius[1] <= 0 | obj@radius[2] <= 0){
stop('radius is negative')
}
})
#new
e1 <- new('Ellipse', names = 'e1')
e2 <- new('Ellipse', names = 'e2', radius = c(3, 4))
setMethod('area', 'Ellipse', function(obj, ...){
print('Area Ellipse Method')
pi*prod(obj@radius)
})
#定义椭圆类
setClass('Ellipse', contains = 'Shape', slots = list(radius = 'numeric'), prototype  = list(radius = c(1, 1)))
#validate
setValidity('Ellipse', function(obj, ...){
if(obj@radius[1] <= 0 | obj@radius[2] <= 0){
stop('radius is negative')
}
})
#validate
setValidity('Ellipse', function(obj, ...){
if(length(obj@radius) !=2) {
stop ('It is not Ellipse')
}
if(which(obj@radius <= 0) >0){
stop ('Radius is negative')
}
})
#new
e1 <- new('Ellipse', names = 'e1')
#new
e1 <- new('Ellipse', names = 'e1')
#定义椭圆类
setClass('Ellipse', contains = 'Shape', slots = list(radius = 'numeric'), prototype  = list(radius = c(1, 1)))
#validate
setValidity('Ellipse', function(obj, ...){
if(length(obj@radius) !=2) {
stop ('It is not Ellipse')
}
if(which(obj@radius <= 0) >0){
stop ('Radius is negative')
}
})
#new
e1 <- new('Ellipse', names = 'e1')
#validate
setValidity('Ellipse', function(obj, ...){
if(length(obj@radius) !=2) {
stop ('It is not Ellipse')
}
if(length(which(obj@radius <= 0)) >0){
stop ('Radius is negative')
}
})
#validate
setValidity('Ellipse', function(object){
if(length(object@radius) !=2)  stop ('It is not Ellipse')
if(length(which(object@radius <= 0)) >0) stop ('Radius is negative')
})
#new
e1 <- new('Ellipse', name = 'e1')
e2 <- new('Ellipse', name = 'e2', radius = c(5, 1))
setMethod('area', 'Ellipse', function(obj, ...){
print('Area Ellipse Method')
pi*prod(obj@radius)
})
area(e1)
area(e2)
circum(e1)
circum(e2)
#count circum of ellipse
setMethod('circum', 'Ellipse', function(obj, ...){
cat('Ellipse Circum:\n')
2*pi*sqrt((obj@radius[1]^2 + obj@radius[2]^2)/2)
})
area(e1)
#count circum of ellipse
setMethod('circum', 'Ellipse', function(obj, ...){
cat('Ellipse Circum:\n')
2*pi*sqrt((obj@radius[1]^2 + obj@radius[2]^2)/2)
})
#count circum of ellipse
setMethod('circum', 'Ellipse', function(obj, ...){
cat("Ellipse Circum:\n")
2*pi*sqrt((obj@radius[1]^2 + obj@radius[2]^2)/2)
})
#count area of ellipse
setMethod('area', 'Ellipse', function(obj, ...){
print('Area Ellipse Method')
pi*prod(obj@radius)
})
#count circum of ellipse
setMethod('circum', 'Ellipse', function(obj, ...){
cat("Ellipse Circum:\n")
2*pi*sqrt((obj@radius[1]^2 + obj@radius[2]^2)/2)
})
#定义椭圆类
setClass('Ellipse', contains = 'Shape', slots = list(radius = 'numeric'), prototype  = list(radius = c(1, 1)))
#validate
setValidity('Ellipse', function(object){
if(length(object@radius) !=2)  stop ('It is not Ellipse')
if(length(which(object@radius <= 0)) >0) stop ('Radius is negative')
})
#new
e1 <- new('Ellipse', name = 'e1')
e2 <- new('Ellipse', name = 'e2', radius = c(5, 1))
#count area of ellipse
setMethod('area', 'Ellipse', function(obj, ...){
print('Area Ellipse Method')
pi*prod(obj@radius)
})
#count circum of ellipse
setMethod('circum', 'Ellipse', function(obj, ...){
cat("Ellipse Circum:\n")
2*pi*sqrt((obj@radius[1]^2 + obj@radius[2]^2)/2)
})
#count circum of ellipse
setMethod('circum', 'Ellipse', function(obj, ...){
print("Ellipse Circum:\n")
2*pi*sqrt((obj@radius[1]^2 + obj@radius[2]^2)/2)
})
#定义椭圆类
setClass('Ellipse', contains = 'Shape', slots = list(radius = 'numeric'), prototype  = list(radius = c(1, 1)))
#validate
setValidity('Ellipse', function(object){
if(length(object@radius) !=2)  stop ('It is not Ellipse')
if(length(which(object@radius <= 0)) >0) stop ('Radius is negative')
})
#new
e1 <- new('Ellipse', name = 'e1')
e2 <- new('Ellipse', name = 'e2', radius = c(5, 1))
#count area of ellipse
setMethod('area', 'Ellipse', function(obj, ...){
print('Area Ellipse Method')
pi*prod(obj@radius)
})
#count circum of ellipse
setMethod('circum', 'Ellipse', function(obj, ...){
cat("Ellipse Circum:\n")
2*pi*sqrt((obj@radius[1]^2 + obj@radius[2]^2)/2)
})
#定义计算周长接口实现
setGeneric('circum', function(obj, ..){
standardGeneric('circum')
})
#count circum of ellipse
setMethod('circum', 'Ellipse', function(obj, ...){
cat("Ellipse Circum:\n")
2*pi*sqrt((obj@radius[1]^2 + obj@radius[2]^2)/2)
})
#定义计算周长接口实现
setGeneric('circum', function(obj, ...){
standardGeneric('circum')
})
#count circum of ellipse
setMethod('circum', 'Ellipse', function(obj, ...){
cat("Ellipse Circum:\n")
2*pi*sqrt((obj@radius[1]^2 + obj@radius[2]^2)/2)
})
circum(e1)
circum(e2)
###任务2:
setClass('Shape', slots = list(name = 'character', radius = 'numeric'))
setClass('Ellipse', contains = 'Shape', prototype = list(radius = c(1, 1)))
setValidity('Ellipse', function(object){
if(length(object@radius) !=2) stop('It is not Ellipse')
if(length(which(object@radius <= 0)) > 0) stop('radius is negative')
})
setGeneric('area', function(obj, ..){
standardGeneric('area')
})
setGeneric('circum', function(obj, ...){
standardGeneric(circum)
})
setGeneric('area', function(object){
standardGeneric('area')
})
setGeneric('circum', function(obj, ...){
standardGeneric('circum')
})
setMethod('area', function(obj, ...){
print('area of Ellipse')
pi*prod(obj@radius)
})
setMethod('area', 'Ellipse', function(obj, ...){
print('area of Ellipse')
pi*prod(obj@radius)
})
setMethod('circum', 'Ellipse', function(obj, ...){
cat('Ellipse circum:\n')
2*pi*sqrt((obj@radius[1]^2 + obj@radius[2^2])/2)
})
#count area of ellipse
setMethod('area', 'Ellipse', function(obj, ...){
print('Area Ellipse Method')
pi*prod(obj@radius)
})
new('Ellipse', name = 'e1')
new('Ellipse', name = 'e2', radius = c(3, 4))
area(e1)
circum(e2)
e1 <- new('Ellipse', name = 'e1')
e2 <- new('Ellipse', name = 'e2', radius = c(3, 4))
area(e1)
circum(e2)
e2 <- new('Ellipse', name = 'e2', radius = c(1, 5))
circum(e2)
setMethod('area', 'Ellipse', function(obj, ...){
print('area of Ellipse')
pi*prod(obj@radius)
})
setMethod('circum', 'Ellipse', function(obj, ...){
cat('Ellipse circum:\n')
2*pi*sqrt((obj@radius[1]^2 + obj@radius[2]^2)/2)
})
e2 <- new('Ellipse', name = 'e2', radius = c(1, 5))
circum(e2)
setGeneric('area', function(obe, ...){
standardGeneric('area')
})
setGeneric('circum', function(obj, ...){
standardGeneric('circum')
})
setMethod('area', 'Ellipse', function(obj, ...){
print('area of Ellipse')
pi*prod(obj@radius)
})
setGeneric('area', function(obj, ...){
standardGeneric('area')
})
setGeneric('circum', function(obj, ...){
standardGeneric('circum')
})
setMethod('area', 'Ellipse', function(obj, ...){
print('area of Ellipse')
pi*prod(obj@radius)
})
setMethod('circum', 'Ellipse', function(obj, ...){
cat('Ellipse circum:\n')
2*pi*sqrt((obj@radius[1]^2 + obj@radius[2]^2)/2)
})
e1 <- new('Ellipse', name = 'e1')
e2 <- new('Ellipse', name = 'e2', radius = c(1, 5))
area(e1)
circum(e2)
setGeneric('circum', function(obj, ...){
standardGeneric('circum')
})
setClass('Circle', contains = 'Ellipse')
c1 <- new('Circle', name = 'c1', radius = c(5, 5))
area(c1)
###任务2:
setClass('Shape', slots = list(name = 'character', radius = 'numeric'))
setClass('Ellipse', contains = 'Shape', prototype = list(radius = c(1, 1), shape = 'Ellipse'))
setClass('Circle', contains = 'Ellipse', prototype = list(radius = 1, shape = 'Circle'))
###任务2:
setClass('Shape', slots = list(name = 'character', radius = 'numeric'))
setClass('Ellipse', contains = 'Shape', prototype = list(radius = c(1, 1), shape = 'Ellipse'))
setClass('Circle', contains = 'Ellipse', prototype = list(radius = 1, shape = 'Circle'))
setValidity('Ellipse', function(object){
if(length(object@radius) !=2) stop('It is not Ellipse')
if(length(which(object@radius <= 0)) > 0) stop('radius is negative')
})
setGeneric('area', function(obj, ...){
standardGeneric('area')
})
setGeneric('circum', function(obj, ...){
standardGeneric('circum')
})
setMethod('area', 'Ellipse', function(obj, ...){
print('area of Ellipse')
pi*prod(obj@radius)
})
setMethod('are', 'Circle', function(obj, ...){
cat('Circle area iis:\n ')
pi*obj@radius^2
})
setMethod('circum', 'Ellipse', function(obj, ...){
cat('Ellipse circum:\n')
2*pi*sqrt((obj@radius[1]^2 + obj@radius[2]^2)/2)
})
setMethod('area', 'Circle', function(obj, ...){
cat('Circle area iis:\n ')
pi*obj@radius^2
})
setMethod('circum', 'Ellipse', function(obj, ...){
cat('Ellipse circum:\n')
2*pi*sqrt((obj@radius[1]^2 + obj@radius[2]^2)/2)
})
setMethod('circum', 'Circle', function(obj, ...){
cat('Circle circum is: \n')
2*pi*obj@radius
})
e2 <- new('Ellipse', name = 'e2', radius = c(1, 5))
c1 <- new('Circle', name = 'c1', radius = 4)
e2 <- new('Ellipse', name = 'e2', radius = c(1, 5), shape = 'Ellipse')
e2 <- new('Ellipse', name = 'e2', radius = c(1, 5))
c1 <- new('Circle', name = 'c1', radius = 4)
c1 <- new('Circle', name = 'c1', radius = 4)
setValidity('Ellipse', function(object){
if(length(which(object@radius <= 0)) > 0) stop('radius is negative')
})
setClass('Shape', slots = list(name = 'character', radius = 'numeric'))
setClass('Ellipse', contains = 'Shape', prototype = list(radius = c(1, 1), shape = 'Ellipse'))
setClass('Circle', contains = 'Ellipse', prototype = list(radius = 1, shape = 'Circle'))
setValidity('Ellipse', function(object){
if(length(which(object@radius <= 0)) > 0) stop('radius is negative')
})
setGeneric('area', function(obj, ...){
standardGeneric('area')
})
setGeneric('circum', function(obj, ...){
standardGeneric('circum')
})
setMethod('area', 'Ellipse', function(obj, ...){
print('area of Ellipse')
pi*prod(obj@radius)
})
setMethod('area', 'Circle', function(obj, ...){
cat('Circle area iis:\n ')
pi*obj@radius^2
})
setMethod('circum', 'Ellipse', function(obj, ...){
cat('Ellipse circum:\n')
2*pi*sqrt((obj@radius[1]^2 + obj@radius[2]^2)/2)
})
setMethod('circum', 'Circle', function(obj, ...){
cat('Circle circum is: \n')
2*pi*obj@radius
})
e2 <- new('Ellipse', name = 'e2', radius = c(1, 5))
c1 <- new('Circle', name = 'c1', radius = 4)
#ellipse
area(e2)
circum(e2)
#circle
area(c1)
circum(c1)
###get cancer studies
x$.url <- 'http://www.cbioportal.org/'
###get cancer studies
x$.url <-
url = paste('http://www.cbioportal.org/', "webservice.do?cmd=getCancerStudies&", sep="")
###get cancer studies
url = paste('http://www.cbioportal.org/', "webservice.do?cmd=getCancerStudies&", sep = "")
headers <- httr::add_headers()
r <- httr::GET(url, headers)
View(r)
url
df = read.table(skip = 0, header=TRUE, as.is=TRUE, sep="\t", quote='', comment.char='', fill=TRUE, text=httr::content(r, "text"))
View(df)
url_cs = paste('http://www.cbioportal.org/', "webservice.do?cmd=getCancerStudies&", sep = "")
headers <- httr::add_headers()
r <- httr::GET(url_cs, headers)
df = read.table(skip = 0, header=TRUE, as.is=TRUE, sep="\t", quote='', comment.char='', fill=TRUE, text=httr::content(r, "text"))
###get case list
url_cl = paste('http://www.cbioportal.org/', "webservice.do?cmd=getCaseLists&cancer_study_id=", df, sep="")
r <- httr::GET(url_cl, headers)
headers <- httr::add_headers()
r <- httr::GET(url_cl, headers)
df_cs = read.table(skip = 0, header=TRUE, as.is=TRUE, sep="\t", quote='', comment.char='', fill=TRUE, text=httr::content(r, "text"))
df_cs = df_cs[2, 1]
###get case list
url_cl = paste('http://www.cbioportal.org/', "webservice.do?cmd=getCaseLists&cancer_study_id=", df, sep="")
headers <- httr::add_headers()
url_cl
df_cs = read.table(skip = 0, header=TRUE, as.is=TRUE, sep="\t", quote='', comment.char='', fill=TRUE, text=httr::content(r, "text"))
df_cs = df_cs[2, 1]
###get case list
url_cl = paste('http://www.cbioportal.org/', "webservice.do?cmd=getCaseLists&cancer_study_id=", df_cs, sep="")
headers <- httr::add_headers()
r <- httr::GET(url_cl, headers)
df_cl = read.table(skip = 0, header=TRUE, as.is=TRUE, sep="\t", quote='', comment.char='', fill=TRUE, text=httr::content(r, "text"))
View(df_cl)
df_cl = df_cl[1, 1]
df_cl = df_cl[1, 1]
df_cl
###get genetic profile
url_gp <- url = paste('http://www.cbioportal.org/', "webservice.do?cmd=getGeneticProfiles&cancer_study_id=", df_cs, sep="")
###get genetic profile
url_gp <- paste('http://www.cbioportal.org/', "webservice.do?cmd=getGeneticProfiles&cancer_study_id=", df_cs, sep="")
r <- httr::GET(url_gp, headers)
df_gp = read.table(skip = 0, header=TRUE, as.is=TRUE, sep="\t", quote='', comment.char='', fill=TRUE, text=httr::content(r, "text"))
View(df_gp)
df_gp = df_cs[4, 1]
df_gp = df_gp[4, 1]
df_gp
headers
View(headers)
View(r)
httr::content(r, "text")
df_cs = read.table(skip = 0, header=TRUE, as.is=TRUE, sep="\t", quote='', comment.char='', fill = TRUE, text = httr::content(r, "text"))
View(df_cs)
mycgds = CGDS("http://www.cbioportal.org/")
mycgds
?read.table
r
headers <- httr::add_headers()
?httr::add_headers
GET("http://httpbin.org/headers",
add_headers(version = version$version.string))
url_cs
url_cl
df_cs
df_cs = df_cs[2, 1]
df_cs
url_cl
paste(c('a', 'b'), collapse = '')
library('cgdsr')
mycgds = CGDS("http://www.cbioportal.org/")
test(mycgds)
mycancerstudy = getCancerStudies(mycgds)[2, 1]
mycaselist = getCaseLists(mycgds, mycancerstudy)[1, 1]
mygeneticprofile = getGeneticProfiles(mycgds, mycancerstudy)[4, 1]
getProfileData(mycgds, c('BRCA1', 'BRCA2'), mygeneticprofile, mycaselist)
mygeneticprofilemygeneticprofile
mygeneticprofile
mygeneticprofile = getGeneticProfiles(mycgds, mycancerstudy)[1, 1]
mygeneticprofile
mygeneticprofile
mycaselist
?getProfileData
library('cgdsr')
# Create CGDS object
mycgds = CGDS("http://www.cbioportal.org/")
# Get list of cancer studies at server
getCancerStudies(mycgds)
# Get available case lists (collection of samples) for a given cancer study
mycancerstudy = getCancerStudies(mycgds)[2,1]
mycaselist = getCaseLists(mycgds,mycancerstudy)[1,1]
# Get available genetic profiles
mygeneticprofile = getGeneticProfiles(mycgds,mycancerstudy)[1,1]
# Get data slices for a specified list of genes, genetic profile and case list
getProfileData(mycgds,c('BRCA1','BRCA2'),mygeneticprofile,mycaselist)
# Get data slice for a single gene
getProfileData(mycgds,'HMGA2',mygeneticprofile,mycaselist)
# Get data slice for multiple genetic profiles and single gene
getProfileData(mycgds,'HMGA2',getGeneticProfiles(mycgds,mycancerstudy)[c(1,2),1],mycaselist)
# Get the same dataset from a vector of case IDs
cases = unlist(strsplit(getCaseLists(mycgds,mycancerstudy)[1,'case_ids'],' '))
getProfileData(mycgds,'HMGA2',getGeneticProfiles(mycgds,mycancerstudy)[c(1,2),1],cases=cases)
###get cancer studies
url_cs = paste('http://www.cbioportal.org/', "webservice.do?cmd=getCancerStudies&", sep = "")
cases = unlist(strsplit(getCaseLists(mycgds,mycancerstudy)[1,'case_ids'],' '))
cases
mycaselist
getCaseLists(mycgds,mycancerstudy)[1,'case_ids']
