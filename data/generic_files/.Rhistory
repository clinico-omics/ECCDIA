color = san_mat_list$color,
pad = 15, thickness = 20,
line = list(color = "black", width = 0.5)),
link = list(source = san_mat_list$mat$source, target = san_mat_list$mat$target, value = san_mat_list$mat$value
)
) %>% layout(title = "Basic Sankey Diagram", font = list(size = 10)
)
}
PlotSanket(san_mat_list)
var_list1
label1 <- unique(rt_san[, var_list[1]])
label2 <- unique(rt_san[, var_list[2]])
san_label <- c(label1, label2)
san_col <- color_type[1: length(san_label)label1 <- unique(rt_san[, var_list[1]])
label2 <- unique(rt_san[, var_list[2]])
san_label <- c(label1, label2)
san_col <- color_type[1: length(san_label)]
label1 <- unique(rt_san[, var_list[1]])
label2 <- unique(rt_san[, var_list[2]])
san_label <- c(label1, label2)
san_col <- color_type[1: length(san_label)]
rt_san <- rt_d
label1 <- unique(rt_san[, var_list[1]])
label2 <- unique(rt_san[, var_list[2]])
lable1
label1
#convert number
rt_san[, var_list[1]] <- as.numeric(as.character(factor(rt_san[, var_list[1]], labels = c(1:length(unique(rt_san[, var_list[1]])) - 1))))
rt_san
var_list1 <- unique(rt_san[, var_list[1]])
var_list1
order(unique(rt_san[, var_list[1]]))
unique(rt_san[, var_list[1]])
reorder(unique(rt_san[, var_list[1]]))
sort(unique(rt_san[, var_list[1]]))
PreSanMat <- function(rt_san, var_list, color_type){
#count frequency
CountFre <- function(var_list, var1, var2, rt_san){
rt_unit <- rt_san[which(rt_san[, var1] == var_list), c(var1, var2)]
san_vec <-  table(rt_unit[, var2])
san_target <- as.numeric(names(san_vec))
san_value <- as.numeric(san_vec)
san_source <- rep(var_list, length(san_target))
san_mat <- data.frame(cbind(san_source, san_target, san_value), stringsAsFactors = FALSE)
colnames(san_mat) <- c('source', 'target', 'value')
return(san_mat)
}
if(length(var_list) == 2){
#get label
label1 <- unique(rt_san[, var_list[1]])
label2 <- unique(rt_san[, var_list[2]])
san_label <- c(label1, label2)
san_col <- color_type[1: length(san_label)]
#convert number
rt_san[, var_list[1]] <- as.numeric(as.character(factor(rt_san[, var_list[1]], labels = c(1:length(unique(rt_san[, var_list[1]])) - 1))))
rt_san[, var_list[2]] <- as.numeric(as.character(factor(rt_san[, var_list[2]], labels = c(1:length(unique(rt_san[, var_list[2]])) + max(rt_san[, var_list[1]])))))
#prepare sankey format
var_list1 <- sort(unique(rt_san[, var_list[1]]))
san_mat_list1 <- lapply(var_list1, CountFre, var_list[1], var_list[2], rt_san)
san_mat1 <- do.call(rbind, san_mat_list1)
san_mat <- san_mat1
san_mat_list <- list(san_label, san_col, san_mat)
names(san_mat_list) <- c('label', 'color', 'mat')
return(san_mat_list)
} else if (length(var_list) == 3){
#get label
label1 <- unique(rt_san[, var_list[1]])
label2 <- unique(rt_san[, var_list[2]])
label3 <- unique(rt_san[, var_list[3]])
san_label <- c(label1, label2, label3)
san_col <- color_type[1: length(san_label)]
#convert number
rt_san[, var_list[1]] <- as.numeric(as.character(factor(rt_san[, var_list[1]], labels = c(1:length(unique(rt_san[, var_list[1]])) - 1))))
rt_san[, var_list[2]] <- as.numeric(as.character(factor(rt_san[, var_list[2]], labels = c(1:length(unique(rt_san[, var_list[2]])) + max(rt_san[, var_list[1]])))))
rt_san[, var_list[3]] <- as.numeric(as.character(factor(rt_san[, var_list[3]], labels = c(1:length(unique(rt_san[, var_list[3]])) + max(rt_san[, var_list[2]])))))
#prepare sankey format
var_list1 <- sort(unique(rt_san[, var_list[1]]))
san_mat_list1 <- lapply(var_list1, CountFre, var_list[1], var_list[2], rt_san)
san_mat1 <- do.call(rbind, san_mat_list1)
var_list2 <- sort(unique(rt_san[, var_list[2]]))
san_mat_list2 <- lapply(var_list2, CountFre, var_list[2], var_list[3], rt_san)
san_mat2 <- do.call(rbind, san_mat_list2)
san_mat <- rbind(san_mat1, san_mat2)
san_mat <- san_mat[]
san_mat_list <- list(san_label, san_col, san_mat)
names(san_mat_list) <- c('label', 'color', 'mat')
return(san_mat_list)
} else {
stop('four or more group make figure complex')
}
}
var_list <- c("Sex", "Histologic_type", "Primary_Site")
san_mat_list <- PreSanMat(rt_d, var_list, color_type)
#perform sankey
PlotSanket <- function(san_mat_list){
plot_ly(type = "sankey", orientation = "h",
node = list(label = san_mat_list$label,
color = san_mat_list$color,
pad = 15, thickness = 20,
line = list(color = "black", width = 0.5)),
link = list(source = san_mat_list$mat$source, target = san_mat_list$mat$target, value = san_mat_list$mat$value
)
) %>% layout(title = "Basic Sankey Diagram", font = list(size = 10)
)
}
PlotSanket(san_mat_list)
san_mat_list$mat
san_mat_list$label
rt_san
factor(rt_san[, var_list[1]]
)
factor(rt_san[, var_list[2]]
)
factor(rt_san[, var_list[3]])
unique(rt_san[, var_list[3]])
as.numeric(as.character(factor(rt_san[, var_list[2]], labels = c(1:length(unique(rt_san[, var_list[2]])) + max(rt_san[, var_list[1]])))))
unique(rt_san[, var_list[2]])
factor(rt_san[, var_list[2]]
)
as.numeric(as.character(factor(rt_san[, var_list[3]], labels = c(1:length(unique(rt_san[, var_list[3]])) + max(rt_san[, var_list[2]])))))
rt_san[, var_list[2]] <- as.numeric(as.character(factor(rt_san[, var_list[2]], labels = c(1:length(unique(rt_san[, var_list[2]])) + max(rt_san[, var_list[1]])))))
rt_san[, var_list[2]]
as.numeric(as.character(factor(rt_san[, var_list[3]], labels = c(1:length(unique(rt_san[, var_list[3]])) + max(rt_san[, var_list[2]])))))
factor(rt_san[, var_list[3]])
factor(unique(rt_san[, var_list[3]]))
unique(rt_san[, var_list[3]])
factor(rt_san[, var_list[3]])
as.character(factor(rt_san[, var_list[3]]))
factor(rt_san[, var_list[3]])
levles(factor(rt_san[, var_list[3]]))
factor(rt_san[, var_list[3]])
label(factor(rt_san[, var_list[3]]))
as.numeric(as.character(factor(rt_san[, var_list[3]], labels = c(1:length(unique(rt_san[, var_list[3]])) + max(rt_san[, var_list[2]])), ordered = FALSE)))
factor(rt_san[, var_list[3]], ordered = FALSE)
levels(factor(rt_san[, var_list[3]]))
PreSanMat <- function(rt_san, var_list, color_type){
#count frequency
CountFre <- function(var_list, var1, var2, rt_san){
rt_unit <- rt_san[which(rt_san[, var1] == var_list), c(var1, var2)]
san_vec <-  table(rt_unit[, var2])
san_target <- as.numeric(names(san_vec))
san_value <- as.numeric(san_vec)
san_source <- rep(var_list, length(san_target))
san_mat <- data.frame(cbind(san_source, san_target, san_value), stringsAsFactors = FALSE)
colnames(san_mat) <- c('source', 'target', 'value')
return(san_mat)
}
if(length(var_list) == 2){
#get label
label1 <- levles(factor(rt_san[, var_list[1]]))
label2 <- levles(factor(rt_san[, var_list[2]]))
san_label <- c(label1, label2)
san_col <- color_type[1: length(san_label)]
#convert number
rt_san[, var_list[1]] <- as.numeric(as.character(factor(rt_san[, var_list[1]], labels = c(1:length(unique(rt_san[, var_list[1]])) - 1))))
rt_san[, var_list[2]] <- as.numeric(as.character(factor(rt_san[, var_list[2]], labels = c(1:length(unique(rt_san[, var_list[2]])) + max(rt_san[, var_list[1]])))))
#prepare sankey format
var_list1 <- unique(rt_san[, var_list[1]])
san_mat_list1 <- lapply(var_list1, CountFre, var_list[1], var_list[2], rt_san)
san_mat1 <- do.call(rbind, san_mat_list1)
san_mat <- san_mat1
san_mat_list <- list(san_label, san_col, san_mat)
names(san_mat_list) <- c('label', 'color', 'mat')
return(san_mat_list)
} else if (length(var_list) == 3){
#get label
label1 <- levles(factor(rt_san[, var_list[1]]))
label2 <- levles(factor(rt_san[, var_list[2]]))
label3 <- levles(factor(rt_san[, var_list[3]]))
san_label <- c(label1, label2, label3)
san_col <- color_type[1: length(san_label)]
#convert number
rt_san[, var_list[1]] <- as.numeric(as.character(factor(rt_san[, var_list[1]], labels = c(1:length(unique(rt_san[, var_list[1]])) - 1))))
rt_san[, var_list[2]] <- as.numeric(as.character(factor(rt_san[, var_list[2]], labels = c(1:length(unique(rt_san[, var_list[2]])) + max(rt_san[, var_list[1]])))))
rt_san[, var_list[3]] <- as.numeric(as.character(factor(rt_san[, var_list[3]], labels = c(1:length(unique(rt_san[, var_list[3]])) + max(rt_san[, var_list[2]])))))
#prepare sankey format
var_list1 <- unique(rt_san[, var_list[1]])
san_mat_list1 <- lapply(var_list1, CountFre, var_list[1], var_list[2], rt_san)
san_mat1 <- do.call(rbind, san_mat_list1)
var_list2 <- unique(rt_san[, var_list[2]])
san_mat_list2 <- lapply(var_list2, CountFre, var_list[2], var_list[3], rt_san)
san_mat2 <- do.call(rbind, san_mat_list2)
san_mat <- rbind(san_mat1, san_mat2)
san_mat_list <- list(san_label, san_col, san_mat)
names(san_mat_list) <- c('label', 'color', 'mat')
return(san_mat_list)
} else {
stop('four or more group make figure complex')
}
}
var_list <- c("Sex", "Histologic_type", "Primary_Site")
san_mat_list <- PreSanMat(rt_d, var_list, color_type)
#perform sankey
PlotSanket <- function(san_mat_list){
plot_ly(type = "sankey", orientation = "h",
node = list(label = san_mat_list$label,
color = san_mat_list$color,
pad = 15, thickness = 20,
line = list(color = "black", width = 0.5)),
link = list(source = san_mat_list$mat$source, target = san_mat_list$mat$target, value = san_mat_list$mat$value
)
) %>% layout(title = "Basic Sankey Diagram", font = list(size = 10)
)
}
PreSanMat <- function(rt_san, var_list, color_type){
#count frequency
CountFre <- function(var_list, var1, var2, rt_san){
rt_unit <- rt_san[which(rt_san[, var1] == var_list), c(var1, var2)]
san_vec <-  table(rt_unit[, var2])
san_target <- as.numeric(names(san_vec))
san_value <- as.numeric(san_vec)
san_source <- rep(var_list, length(san_target))
san_mat <- data.frame(cbind(san_source, san_target, san_value), stringsAsFactors = FALSE)
colnames(san_mat) <- c('source', 'target', 'value')
return(san_mat)
}
if(length(var_list) == 2){
#get label
label1 <- levels(factor(rt_san[, var_list[1]]))
label2 <- levels(factor(rt_san[, var_list[2]]))
san_label <- c(label1, label2)
san_col <- color_type[1: length(san_label)]
#convert number
rt_san[, var_list[1]] <- as.numeric(as.character(factor(rt_san[, var_list[1]], labels = c(1:length(unique(rt_san[, var_list[1]])) - 1))))
rt_san[, var_list[2]] <- as.numeric(as.character(factor(rt_san[, var_list[2]], labels = c(1:length(unique(rt_san[, var_list[2]])) + max(rt_san[, var_list[1]])))))
#prepare sankey format
var_list1 <- unique(rt_san[, var_list[1]])
san_mat_list1 <- lapply(var_list1, CountFre, var_list[1], var_list[2], rt_san)
san_mat1 <- do.call(rbind, san_mat_list1)
san_mat <- san_mat1
san_mat_list <- list(san_label, san_col, san_mat)
names(san_mat_list) <- c('label', 'color', 'mat')
return(san_mat_list)
} else if (length(var_list) == 3){
#get label
label1 <- levels(factor(rt_san[, var_list[1]]))
label2 <- levels(factor(rt_san[, var_list[2]]))
label3 <- levels(factor(rt_san[, var_list[3]]))
san_label <- c(label1, label2, label3)
san_col <- color_type[1: length(san_label)]
#convert number
rt_san[, var_list[1]] <- as.numeric(as.character(factor(rt_san[, var_list[1]], labels = c(1:length(unique(rt_san[, var_list[1]])) - 1))))
rt_san[, var_list[2]] <- as.numeric(as.character(factor(rt_san[, var_list[2]], labels = c(1:length(unique(rt_san[, var_list[2]])) + max(rt_san[, var_list[1]])))))
rt_san[, var_list[3]] <- as.numeric(as.character(factor(rt_san[, var_list[3]], labels = c(1:length(unique(rt_san[, var_list[3]])) + max(rt_san[, var_list[2]])))))
#prepare sankey format
var_list1 <- unique(rt_san[, var_list[1]])
san_mat_list1 <- lapply(var_list1, CountFre, var_list[1], var_list[2], rt_san)
san_mat1 <- do.call(rbind, san_mat_list1)
var_list2 <- unique(rt_san[, var_list[2]])
san_mat_list2 <- lapply(var_list2, CountFre, var_list[2], var_list[3], rt_san)
san_mat2 <- do.call(rbind, san_mat_list2)
san_mat <- rbind(san_mat1, san_mat2)
san_mat_list <- list(san_label, san_col, san_mat)
names(san_mat_list) <- c('label', 'color', 'mat')
return(san_mat_list)
} else {
stop('four or more group make figure complex')
}
}
var_list <- c("Sex", "Histologic_type", "Primary_Site")
san_mat_list <- PreSanMat(rt_d, var_list, color_type)
#perform sankey
PlotSanket <- function(san_mat_list){
plot_ly(type = "sankey", orientation = "h",
node = list(label = san_mat_list$label,
color = san_mat_list$color,
pad = 15, thickness = 20,
line = list(color = "black", width = 0.5)),
link = list(source = san_mat_list$mat$source, target = san_mat_list$mat$target, value = san_mat_list$mat$value
)
) %>% layout(title = "Basic Sankey Diagram", font = list(size = 10)
)
}
PlotSanket(san_mat_list)
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
stop('you can choose two or three clinical factors')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
plot_ly(type = "sankey", orientation = "h",
node = list(label = san_mat_list$label,
color = san_mat_list$color,
pad = 50, thickness = 20,
line = list(color = "black", width = 0.5)),
link = list(source = san_mat_list$mat$source, target = san_mat_list$mat$target, value = san_mat_list$mat$value
)
) %>% layout(title = "Basic Sankey Diagram", font = list(size = 10)
)
15
plot_ly(type = "sankey", orientation = "h",
node = list(label = san_mat_list$label,
color = san_mat_list$color,
pad = 15, thickness = 20,
line = list(color = "black", width = 1)),
link = list(source = san_mat_list$mat$source, target = san_mat_list$mat$target, value = san_mat_list$mat$value
)
) %>% layout(title = "Basic Sankey Diagram", font = list(size = 10)
)
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
#perform sankey
PlotSanket <- function(san_mat_list){
plot_ly(type = "sankey", orientation = "v",
node = list(label = san_mat_list$label,
color = san_mat_list$color,
pad = 15, thickness = 20,
line = list(color = "black", width = 0.5)),
link = list(source = san_mat_list$mat$source, target = san_mat_list$mat$target, value = san_mat_list$mat$value
)
) %>% layout(title = "Basic Sankey Diagram", font = list(size = 10)
)
}
PlotSanket(san_mat_list)
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
if (interactive()) {
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
ui <- fluidPage(
actionButton("rmv", "Remove UI"),
textInput("txt", "This is no longer useful")
)
server <- function(input, output, session) {
observeEvent(input$rmv, {
removeUI(
selector = "div:has(> #txt)"
)
})
}
shinyApp(ui, server)
if (interactive()) {
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
colnames(data_sur_os)
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
data_sur_os$Year
factor(data_sur_os$Year)
levels(factor(data_sur_os$Year))
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
library(rsconnect)
deployApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
