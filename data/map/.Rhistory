highlight(
"plotly_hover",
selected = attrs_selected(line = list(color = "black"))
) %>%
widgetframe::frameWidget()
?theme_bw
p <- ggplot(usd) + geom_sf(aes(fill = pop_2010)) + theme_minimal()
ggplotly(p) %>%
highlight(
"plotly_hover",
selected = attrs_selected(line = list(color = "black"))
) %>%
widgetframe::frameWidget()
ggplotly(p) %>%
highlight(
"plotly_hover",
selected = attrs_selected(line = list(color = "black"))
)
ggplotly(p) %>%
highlight(
"plotly_hover",
selected = attrs_selected(line = list(color = "black"))
) %>%
widgetframe::frameWidget()
ggplotly(p) %>%
highlight(
"plotly_hover",
selected = attrs_selected(line = list(color = "black"))
) %>%
widgetframe::frameWidget(ggiraph(code=print(p)))
?frameWidget
ggplot(usd) + geom_sf(aes(fill = pop_2010)) + theme_minimal()
p <- ggplot(usd) + geom_sf(aes(fill = pop_2010)) + theme_minimal()
ggplotly(p) %>%
highlight(
"plotly_hover",
selected = attrs_selected(line = list(color = "black"))
)
ggplotly(p) %>%
highlight(
"plotly_hover",
selected = attrs_selected(line = list(color = "black"))
) %>%
widgetframe::frameWidget()
?suppressPackageStartupMessages
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
?layout
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
?geom_sf
?aes
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
?theme_minimal
View(usa)
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
?colormap
??colormap
library(ComplexHeatmap)
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
install.packages('colormap')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
deployApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
deployApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
deployApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
deployApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
colnames(usa)
View(usa)
library(albersusa)
library(sp)
library(sf)
library(ggplot2)
library(ggiraph)
suppressPackageStartupMessages(library(plotly))
usa <- albersusa::usa_sf("laea")
usd <- crosstalk::SharedData$new(usa)
p <- ggplot(usd) + geom_sf(aes(fill = pop_2010)) + theme_minimal()
ggplotly(p) %>%
highlight(
"plotly_hover",
selected = attrs_selected(line = list(color = "black"))
) %>%
widgetframe::frameWidget()
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
View(usa)
deployApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
?withSpinner
require(ISLR)
train = Year<2005
require(ISLR)
install.pacakges('ISLR')
install.pacakages('ISLR')
install.packages('ISLR')
require(ISLR)
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket, family = binomial)
View(glm.fit)
glm(formula = Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, family = binomial, data = Smarket)
summary(glm.fit)
Smarket
ggforest(glm.fit, data = Smarket)
?ggforest
?glm
rt_escc <- read.table(file = '/Users/stead/JS_data/level3_data/SEER/ESCC/esophageal_cancer_element_ratio.txt',
header = TRUE, row.names = NULL, stringsAsFactors = FALSE)
rt_escc <- read.table(file = '/Users/stead/JS_data/level3_data/SEER/ESCC/esophageal_cancer_element_ratio.txt',
header = TRUE, row.names = NULL, stringsAsFactors = FALSE, sep = '\t')
View(rt_escc)
colnames(rt_escc)
unique(rt_escc$M)
rt_escc_M <- rt_escc[-which(rt_escc$M == 'Unknown'), ]
View(rt_escc_M)
glm_fit <- glm(Direction ~ Sex + T + N + Histology + Stage + Age, data = rt_escc_M, family = binomial)
glm_fit <- glm(M ~ Sex + T + N + Histology + Stage + Age, data = rt_escc_M, family = binomial)
Direction
Smarket$Direction
Smarket
rt_escc_M$M
glm_fit <- glm(M ~ Sex + T + N + Histology + Stage + Age, data = rt_escc_M, family = binomial)
?glm
glm_fit <- glm(M ~  Age, data = rt_escc_M, family = binomial)
Smarket <- Smarket
View(Smarket)
View(rt_escc_M)
glm_fit <- glm(M ~ Sex + T + N + Histology + Stage + Age, data = rt_escc_M, family = binomial)
colnames(rt_escc_M)
glm_fit <- glm(M ~ Sex + T + N + Histology + Stage + Age, data = rt_escc_M, family = binomial)
glm_fit <- glm(M ~ Sex + T + N + Histology + Stage + Age, data = rt_escc_M, family = gaussian)
glm_fit <- glm(M ~ Sex + T + N + Histology + Stage + Age, data = rt_escc_M, family = identity)
glm_fit <- glm(M ~ Sex + T + N + Histology + Stage + Age, data = rt_escc_M, family = log)
rt_escc_git <- rt_escc[, c( 'Sex', 'T', 'N', 'Histology', 'Stage', 'Age')]
glm_fit <- glm(M ~ Sex + T + N + Histology + Stage + Age, data = rt_escc_git, family = binomial)
rt_escc_git <- rt_escc[, c( 'Sex', 'T', 'N', 'M', 'Histology', 'Stage', 'Age')]
glm_fit <- glm(M ~ Sex + T + N + Histology + Stage + Age, data = rt_escc_git, family = binomial)
View(glm.fit)
rt_escc_git$M < as.character(rt_escc_git$M)
rt_escc_git$M <- as.factor(rt_escc_git$M)
summrt_escc_git$M
rt_escc_git$M
rt_escc_git <- rt_escc_M[, c( 'Sex', 'T', 'N', 'M', 'Histology', 'Stage', 'Age')]
rt_escc_git$M <- as.factor(rt_escc_git$M)
rt_escc_git$M
glm_fit <- glm(M ~ Sex + T + N + Histology + Stage + Age, data = rt_escc_git, family = binomial)
View(glm_fit)
summary(glm_fit)
p <- predict(glm_fit,type='response')
plot(seq(-2,2,length=80),sort(p),col='blue')
plot(seq(-2,2,length=20808),sort(p),col='blue')
glm_fit <- glm(M ~ Sex + T + N + Histology + Stage + Age, data = rt_escc_git, family = binomial(link = "logit"))
p <- predict(glm_fit,type='response')
plot(seq(-2,2,length=20808),sort(p),col='blue')
glm_fit <- glm(M ~ Sex + T + N + Histology + Stage + Age, data = rt_escc_git, family = binomial(link = "logit"),
control = list(maxit = 100))
p <- predict(glm_fit,type='response')
plot(seq(-2,2,length=20808),sort(p),col='blue')
p <- predict(glm_fit,type='response')
plot(seq(-2,2,length=20808),sort(p),col='blue')
glm_fit <- glm(M ~ Sex + T + N + Histology + Stage + Age, data = rt_escc_git, family = binomial(link = "logit"),
control = list(maxit = 1000))
p <- predict(glm_fit,type='response')
plot(seq(-2,2,length=20808),sort(p),col='blue')
?predict
iris[1:100,]
colnames(rt_escc)
unqiue(rt_escc$Chemotherapy)
uniqiue(rt_escc$Chemotherapy)
unique(rt_escc$Chemotherapy)
rt_escc_git <- rt_escc_M[, c('Chemotherapy', 'Sex', 'T', 'N', 'M', 'Histology', 'Stage', 'Age')]
rt_escc_git$Chemotherapy <- as.factor(rt_escc_git$Chemotherapy)
glm_fit <- glm(Chemotherapy ~ Sex + T + N + M + Histology + Stage + Age, data = rt_escc_git, family = binomial(link = "logit"),
control = list(maxit = 1000))
p <- predict(glm_fit,type='response')
plot(seq(-2,2,length=20808),sort(p),col='blue')
summary(glm_fit)
glm_fit <- glm(M ~ Sex + T + N + Histology + Stage + Age, data = rt_escc_git, family = binomial(link = "logit"),
control = list(maxit = 1000))
rt_escc_git$M <- as.factor(rt_escc_git$M)
glm_fit <- glm(M ~ Sex + Histology + Age, data = rt_escc_git, family = binomial(link = "logit"),
control = list(maxit = 1000))
p <- predict(glm_fit,type='response')
plot(seq(-2,2,length=20808),sort(p),col='blue')
plot(seq(-2,2,length=20808),sort(p),col='blue')
glm_fit <- glm(M ~ Sex + T + N + Histology + Stage + Age, data = rt_escc_git, family = binomial(link = "logit"),
control = list(maxit = 1000))
p <- predict(glm_fit,type='response')
plot(seq(-2,2,length=20808),sort(p),col='blue')
colnames(rt_escc)
#bone_met
rt_escc_git$bone_met <- as.factor(rt_escc_git$bone_met)
glm_fit <- glm(bone_met ~ Sex + T + N + M + Histology + Stage + Age, data = rt_escc_git, family = binomial(link = "logit"),
control = list(maxit = 1000))
p <- predict(glm_fit,type='response')
plot(seq(-2,2,length=20808),sort(p),col='blue')
rt_escc$bone_met <- as.factor(rt_escc$bone_met)
glm_fit <- glm(bone_met ~ Sex + T + N + M + Histology + Stage + Age, data = rt_escc, family = binomial(link = "logit"),
control = list(maxit = 1000))
p <- predict(glm_fit,type='response')
plot(seq(-2,2,length=20808),sort(p),col='blue')
unique(rt_escc$bone_met)
#bone_met
rt_escc_d <- rt_escc[-which(rt_escc$bone_met == 'Unknown'), ]
rt_escc_d$bone_met <- as.factor(rt_escc_d$bone_met)
glm_fit <- glm(bone_met ~ Sex + T + N + M + Histology + Stage + Age, data = rt_escc_d, family = binomial(link = "logit"),
control = list(maxit = 1000))
p <- predict(glm_fit,type='response')
plot(seq(-2,2,length=20808),sort(p),col='blue')
dim(rt_escc_d)
#bone_met
rt_escc_d <- rt_escc[-which(rt_escc$bone_met == 'Unknown'), ]
rt_escc_d$bone_met <- as.factor(rt_escc_d$bone_met)
glm_fit <- glm(bone_met ~ Sex + T + N + M + Histology + Stage + Age, data = rt_escc_d, family = binomial(link = "logit"),
control = list(maxit = 1000))
p <- predict(glm_fit,type='response')
plot(seq(-2,2,length = dim(rt_escc_d)[1]),sort(p),col='blue')
View(rt_escc_d)
which(rt_escc_d$bone_met == 'Yes')
length(which(rt_escc_d$bone_met == 'Yes'))
glm_fit <- glm(bone_met ~ Sex + T + N + M + Histology + Stage + Age, data = rt_escc_d, family = binomial(link = "logit"),
control = list(maxit = 1000))
summary(glm_fit)
glm_fit <- glm(bone_met ~ Sex, data = rt_escc_d, family = binomial(link = "logit"),
control = list(maxit = 1000))
summary(glm_fit)
glm_fit <- glm(bone_met ~ T, data = rt_escc_d, family = binomial(link = "logit"),
control = list(maxit = 1000))
summary(glm_fit)
glm_fit <- glm(bone_met ~ N, data = rt_escc_d, family = binomial(link = "logit"),
control = list(maxit = 1000))
summary(glm_fit)
p <- predict(glm_fit,type='response')
plot(seq(-2,2,length = dim(rt_escc_d)[1]),sort(p),col='blue')
glm_fit <- glm(bone_met ~ T, data = rt_escc_d, family = binomial(link = "logit"),
control = list(maxit = 1000))
summary(glm_fit)
p <- predict(glm_fit,type='response')
plot(seq(-2,2,length = dim(rt_escc_d)[1]),sort(p),col='blue')
glm_fit <- glm(bone_met ~ Stage, data = rt_escc_d, family = binomial(link = "logit"),
control = list(maxit = 1000))
summary(glm_fit)
p <- predict(glm_fit,type='response')
plot(seq(-2,2,length = dim(rt_escc_d)[1]),sort(p),col='blue')
glm_fit <- glm(bone_met ~ Age, data = rt_escc_d, family = binomial(link = "logit"),
control = list(maxit = 1000))
summary(glm_fit)
p <- predict(glm_fit,type='response')
plot(seq(-2,2,length = dim(rt_escc_d)[1]),sort(p),col='blue')
glm_fit <- glm(bone_met ~ Sex, data = rt_escc_d, family = binomial(link = "logit"),
control = list(maxit = 1000))
summary(glm_fit)
p <- predict(glm_fit,type='response')
plot(seq(-2,2,length = dim(rt_escc_d)[1]),sort(p),col='blue')
glm_fit <- glm(bone_met ~ N, data = rt_escc_d, family = binomial(link = "logit"),
control = list(maxit = 1000))
summary(glm_fit)
p <- predict(glm_fit,type='response')
plot(seq(-2,2,length = dim(rt_escc_d)[1]),sort(p),col='blue')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
CF
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
usa
library(albersusa)
usa
suppressPackageStartupMessages(library(plotly))
usa <- albersusa::usa_sf("laea")
usd <- crosstalk::SharedData$new(usa)
getwd()
setwd('/Users/stead/JS_data/source_tree/project_code/seer/ESCC_project/data/map')
saveRDS(usd, file = 'map.rds')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
data_map
View(data_map)
usa
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
?geom_line
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
deployApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
################################count each elements ratio distribution#################################
setwd('/Users/stead/JS_data/project/SEER/ESCC/clinical_factor_time_ratio')
rt_ratio <- read.table(file = '/Users/stead/JS_data/level3_data/SEER/ESCC/esophageal_cancer_element_ratio.txt', header = TRUE,
stringsAsFactors = FALSE, sep = '\t')
View(data_ratio)
source('~/JS_data/source_tree/project_code/seer/ESCC/ESCC_SEER_analysis.R')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
View(data_ratio)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
View(df)
l <- list(color = toRGB("white"), width = 2)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
chart_link = api_create(p, filename="choropleth-ag")
p
setwd('/Users/stead/JS_data/source_tree/project_code/seer/ESCC_project/data/map')
saveRDS(df, file = 'map2.rds')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
dens <- with(diamonds, tapply(price, INDEX = cut, density))
df <- data.frame(
x = unlist(lapply(dens, "[[", "x")),
y = unlist(lapply(dens, "[[", "y")),
cut = rep(names(dens), each = length(dens[[1]]$x))
)
View(df)
View(data_sur_rate)
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
View(data_sur_rate)
View(data_sur_rate)
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/Desktop/Aliclound/bar-plot-r-plugin-copy/bar_plot/bar-plot-r')
View(rt_ratio)
View(data_ratio)
plot_ly(data_ratio, x = ~var_a, y = ~frequency, type = 'bar', color = ~group)
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
data.table::melt(data, id.vars='Animals') %>%
plot_ly(x = ~Animals, y = ~value, type = 'bar',
name = ~variable, color = ~variable) %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
data.table::melt(mat_ratio, id.vars = 'var_a')
Animals <- c("giraffes", "orangutans", "monkeys")
SF_Zoo <- c(20, 14, 23)
LA_Zoo <- c(12, 18, 29)
data <- data.frame(Animals, SF_Zoo, LA_Zoo)
data.table::melt(data, id.vars='Animals') %>%
plot_ly(x = ~Animals, y = ~value, type = 'bar',
name = ~variable, color = ~variable) %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
View(data)
data.table::melt(data, id.vars='Animals')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
is.data.frame(mat_ratio)
is.data.frame(data_ratio)
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
?brewer.pal
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
color = brewer.pal(length(unique(mat_ratio$group))
brewer.pal(1)
brewer.pal(2, 'Set3')
brewer.pal(10, 'Set3')
brewer.pal(11, 'Set3')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
runApp('~/JS_data/source_tree/project_code/seer/ESCC_project')
